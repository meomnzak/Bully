#include <bits/stdc++.h>
#include "Facilitator.h"
#include <windows.h>
#include "Process.h"
#include "Message.h"

using namespace std;

int main(int argc, TCHAR *argv[]) {
    if (argc ==
        1) {                      // when first start the program it will begin from here which is the facilitator other than that there will be args to make new process
        Facilitator facilitator;
        while (true) {
            string command;
            getline(cin, command);
            stringstream ss(command);
            string word;
            ss >> word;
            if (command == "start process") {
                facilitator.addProcess();
            } else if (word == "shut") {
                string id;
                ss >> id;
                facilitator.shutProcess(id);
            } else if (command == "end") {
                facilitator.shutAllProcesses();
                break;
            }
            Sleep(1000);
            facilitator.checkProcesses();
        }
    } else {                                                // this the logic for the processes other than the facilitator
        Process process(argv[1]);
        process.openMapping();
        while (process.isAlive()) {
            Sleep(1000);
            string s = process.readMessage();
            Message msg(s);
            msg.setCurTime(msg.getCurTime() + 1);

            // The lines below are related to the bonus feature
            if (msg.getMakeComputation()) {
                srand(time(0));
                if (msg.getIsCoordinator()) {
                    int n = msg.getArrSz();
                    vector<int> vec;
                    cout << "The array generated by coordinator is: ";
                    for (int i = 0; i < n; i++) {
                        vec.push_back(rand() % 10);
                        cout << vec[i] << " ";
                    }
                    cout << endl;
                    msg.setArr(vec);
                } else {
                    if (!msg.getArr().empty()) {
                        int num = *min_element(msg.getArr().begin(), msg.getArr().begin() + msg.getArrSz());
                        msg.setArr({num});
                    }
                }
            }
            msg.setMakeComputation(0);
            string out = msg.encodeMessage();
            process.writeMessage(out);
        }
    }


    return 0;
}